// C Program to multiply two matrix using pthreads without  
// use of global variables  
#include<stdio.h> 
#include<pthread.h> 
#include<unistd.h> 
#include<stdlib.h> 
#define MAX 4 
 #include <time.h> 
  
//Each thread computes single element in the resultant matrix 
void *hello(void* args) 
{ 

clock_t t1, t2;
    float temps;
    
    t1 = clock();
 
  
 

    int *data = (int *)args; 
    int N = 0, i = 0; 
      
    int x = data[0]; 
    for (i = 1; i <= x; i++) 
           N += data[i]*data[i+x]; 
      
    int *threadID = (int*)malloc(sizeof(int)); 
         *threadID = N; 
         
      
   	  printf(" HELLO FROM THREAD %d \n ", threadID);      
         
        
         
        t2 = clock();
    temps = (float)(t2-t1)/CLOCKS_PER_SEC;
    printf("temps parallï¿½le  ' = %f\n", temps);  
//Used to terminate a thread and the return value is passed as a pointer 
    pthread_exit(threadID); 
    
    
    
} 


void runthread (int N )
{
	  clock_t t1, t2;
	    float temps;
    
    t1 = clock();
 

 



    int matA[N][N];  
    int matB[N][N];  
      
      
    int r2=MAX,c2=MAX,i,j,k; 
    
  
  
    // Generating random values in matA 
    for (i = 0; i < N; i++)  
            for (j = 0; j < N; j++)  
                   matA[i][j] = rand() % 10;  
            
        // Generating random values in matB  
    for (i = 0; i < N; i++)  
            for (j = 0; j < N; j++)  
                   matB[i][j] = rand() % 10;  
     
    // Displaying matA  
	
	  printf(" Afficher  matA  ");  
	  printf("\n");      
	    
    for (i = 0; i < N; i++){ 
        for(j = 0; j < N; j++) 
            printf("%d ",matA[i][j]); 
        printf("\n"); 
    } 
              
	  printf(" Afficher  matB ");  
	  printf("\n");  
	                  
    for (i = 0; i < r2; i++){ 
        for(j = 0; j < c2; j++) 
            printf("%d ",matB[i][j]); 
        printf("\n");     
    } 
      
      
    int max = N*c2; 
      
      
    //declaring array of threads of size r1*c2         
    pthread_t *thread; 
    thread = (pthread_t*)malloc(sizeof(pthread_t)*sizeof(pthread_t)); 
      
    int count = 0; 
    int* arg = NULL; 
    for (i = 0; i < N; i++) 
        for (j = 0; j < c2; j++) 
               { 
                 
               //storing row and column elements in data  
            arg = (int *)malloc((20)*sizeof(int)); 
            arg[0] = N; 
      
            for (k = 0; k < N; k++) 
                arg[k+1] = matA[i][k]; 
      
            for (k = 0; k < r2; k++) 
                arg[k+N+1] = matB[k][j]; 
               
             //creating thread
                pthread_create(&thread[count++], NULL,  
                               hello, (void*)(arg)); 
                  
                    } 
      
    printf("RESULTAT MATRIX   :- \n"); 
    for (i = 0; i < N; i++)  
    { 
      void *value_ptdr; 
        
      //Joining all threads and collecting return value  
      pthread_join(thread[i], &value_ptdr); 
        


      printf("#  ./mmm S  \n  %i  ",i); 
     printf(" ===================== mode   \n ");  
      printf(" Comptage sequentiel des fils  \n %i   ",thread[i]);      
			
	
			
			 
            
          int *p = (int *)value_ptdr; 
      printf("%d ",*p); 
      if ((i + 1) % c2 == 0) 
          printf("\n"); 
    } 
    
        t2 = clock();
    temps = (float)(t2-t1)/CLOCKS_PER_SEC;
    printf("temps sequentielle  ' = %f\n", temps);
}
  
//Driver code 
int main() 
{ 
    float temps;
    clock_t t1, t2;
 
    t1 = clock();
    
  for (int i =2; i <5; i++) 
  {

     runthread (i); 
 }   
     
     
     
     
  
 

  
  

  return 0; 
} 
